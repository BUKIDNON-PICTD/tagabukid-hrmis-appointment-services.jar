import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*;

class ServiceRecordReportService 
{
	@Service("PersistenceService")
    def persistenceSvc;

	@Service('DateService')
	def dtSvc 

	@Service('TagabukidLookupService')
    def tgbkdSvc

	@Service('NumberService')
	def numSvc

	@Service('RPTUtil')
	def util

	@ActiveDB(value='servicerecord', em='tagabukid_hrmis')
	def em

	@Env
	def env;

	@ProxyMethod
	public def getServiceRecordById(params){
		def data = [:]
	    //println params
		def servicerecord = persistenceSvc.read([_schemaname: 'hrmis_pds', objid:params.objid])
		//println "*************************************************************"
		//println servicerecord.servicerecordInfos
		//println	servicerecord.objid
		//println servicerecord
		//println "*************************************************************"
		//println params.forretirement
		servicerecord.servicerecordInfos.each{
			//it.personnel = tgbkdSvc.getEntityByObjid([entityid:it.entityid]);
        	//it.plantilla = tgbkdSvc.getPlantillaById([plantillaid:it.plantilla.Id]);
			//it.plantilla.Id = it.plantilla.Id.toString()
			//it.jobposition = persistenceSvc.read( [_schemaname:'master_tbljobposition', objid:it.jobposition.objid] );
			//it.employmentstatus = persistenceSvc.read( [_schemaname:'master_tblemptemploymentstatus', objid:it.employmentstatus.objid] );
            //it.org = persistenceSvc.read( [_schemaname:'master_tblorganizationunit', orgunitid:it.org.orgunitid] );
            //it.branch = persistenceSvc.read( [_schemaname:'master_tblemploymentbranch', objid:it.branch.objid] );
            it.monthlysalary = (it.reportdisplay == 'DAILY') ? it.monthlysalary/22 : (it.reportdisplay == 'MONTHLY') ? it.monthlysalary : (it.reportdisplay == 'ANNUALLY') ? it.monthlysalary*12 : (it.reportdisplay == 'HONORARIUM') ? it.monthlysalary : 'NA'
            it.reportdisplay = (it.reportdisplay == 'DAILY') ? "/d" : (it.reportdisplay == 'MONTHLY') ? "/m" : (it.reportdisplay == 'ANNUALLY') ? "/a" :  (it.reportdisplay == 'HONORARIUM') ? "/h" : 'NA'
            it.employmentstatus.name = (it.employmentstatus.name == 'CASUAL') ? "C" : (it.employmentstatus.name == 'PERMANENT') ? "P" : it.employmentstatus.name
            it.lawop = it.lawop ? it.lawop : "None"
            it.personnelaction = tgbkdSvc.getSingleServiceRecordById( [objid:it.personnelaction.objid] );
            println it.personnelaction
		}.sort{it.datefrom}

		servicerecord.serviceretireInfos.each{
			//it.separationtype = persistenceSvc.read([_schemaname:'master_tblemploymentseparationtype', objid:it.separationtype.objid])
			it.personnelaction = it.separationtype;
			it.datefrom = (params.forgsis == true) ? it.datefrom : it.datefrom - 1
			servicerecord.servicerecordInfos<<it
		}//.sort{it.datefrom}

		//println servicerecord.servicerecordInfos
		//appointment.org = persistenceSvc.read( [_schemaname:'master_tblorganizationunit', orgunitid:appointment.org.objid] );
		//appointment.natureofappointment = persistenceSvc.read( [_schemaname:'master_tblappointmententrycode', objid:appointment.natureofappointmentid] );
		//servicerecord.signatorygroup = persistenceSvc.read( [_schemaname:'hrmis_appointment_signatorygrouping', objid:appointment.signatorygroup.objid] );
		//println appointment
		data.reportdata = servicerecord;
		def d = dtSvc.getServerDate()
		def x = em.findServiceRecordReceiptData([objid:servicerecord.objid])

		// if (x == null){
		// 	def diff.difference = 1000
		// }else{
		// 	def diff = em.findDateDiff([currentdate:d, receiptdate:x.receiptdate])
		// }

		def diff = x ? em.findDateDiff([currentdate:d, receiptdate:x.receiptdate]) : em.findDateDiffBogus()
		//def z = diff ? diff.difference : 1000
		//println x
		//println diff
		//println	z
		data.parameters = [
			LGUNAME  :"PG-BUKIDNON, REGION 10",
			LGUADDRESS : "Provincial Capitol, City of Malaybalay",
			TITLE :"SERVICE RECORD",
			ORGNAME :"PROVINCIAL HUMAN RESOURCE MANAGEMENT OFFICE",
			receiptno : (diff.difference <= 90) ? x.receiptno : null,
			receiptdate	: (diff.difference <= 90) ? x.receiptdate : null,
			forretirement : (params.forretirement == true) ? null : "*Not valid for retirement purposes",
		]
		return data


	}

	


	def buildTitle(params) {
		if (params.period == 'quarterly') return 'Quarterly'
        if (params.period == 'monthly') return 'Monthly'
        if (params.period == 'daily') return 'Daily'
        if (params.period == 'asofqtr') return 'Quarterly'
        if (params.period == 'asofmonth') return 'Monthly'
        if (params.period == 'asofday') return 'Daily'
	}

	@ProxyMethod
	public List getNumDays( year, month ) {
		if ( !month && month < 0 ) return []
		
		Calendar cal = Calendar.getInstance()
        cal.set( year, month, 1)
        int maxday = cal.getActualMaximum(cal.DAY_OF_MONTH)
		def numdays = []
		1.upto( maxday ) { numdays.add( it ) }
		return numdays 
	}

	@ProxyMethod
	public List getDocumentStates() {
		return [
		[name:'idle', title:'IDLE'],
		[name:'enroute', title:'ENROUTE'],
		[name:'received', title:'RECEIVED'],
		[name:'processing', title:'PROCESSING'],
		[name:'sent', title:'SENT'],
		[name:'closed', title:'CLOSED'],
		[name:'archive', title:'ARCHIVE'],
		[name:'attached', title:'ATTACHED'],
		[name:'archived', title:'ARCHIVED'],
		[name:'offline', title:'OFFLINE'],
		[name:'outgoing', title:'OUTGOING'],
		[name:'redflag', title:'REDFLAG'],
		[name:'linked', title:'LINKED']
		];
	
	}

	@ProxyMethod
	public Boolean getReportPermission() {
		return userRoleSvc.getUsers( [domain:'SUBAY', roles:'MASTER'] ).collect {it.objid}.contains(env.USERID)
	
	}

	void buildParams( params ) {
		params.filter = '';
		params.period = '';
		if(!params.asof){
			if(!params.month ){
				params.period = 'quarterly'
			}else if(!params.day){
				params.period = 'monthly'
			}else{
				params.period = 'daily'
				params.date = params.year +'-'+ params.month.index + '-' + params.day;
			}
		}else{
			if(!params.month ){
				params.period = 'asofqtr'
			}else if(!params.day){
				params.period = 'asofmonth'
			}else{
				params.period = 'asofday'
				params.date = params.year +'-'+ params.month.index + '-' + params.day;
			}
		}

		def period = new StringBuffer();
		def rundate = dtSvc.getServerDate(); 
		if ( params.period == 'quarterly' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.qtr ) throw new Exception('qtr is required');

			def months = dtSvc.getMonthsByQtr( params.qtr );
			def monthindex = months[0].index;
			def strmonth = (monthindex > 9? monthindex: '0'+monthindex); 
			params.startdate = params.year +'-'+ strmonth +'-01'; 
			params.enddate = dtSvc.getQtrEndDate( params.qtr, params.year ); 
			period.append( months[0].caption +' - '+ months[-1].caption +' '+ params.year ); 

		} else if ( params.period == 'asofqtr' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.qtr ) throw new Exception('qtr is required');

			def months = dtSvc.getMonths(); 
			period.append( months[0].caption );
			params.startdate = params.year +'-01-01'; 
			params.enddate = dtSvc.getQtrEndDate( params.qtr, params.year ); 

			months = dtSvc.getMonthsByQtr( params.qtr );
			period.append(' - '+ months[-1].caption +' '+ params.year ); 

		} else if ( params.period == 'monthly' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.month ) throw new Exception('month is required');

			def monthindex = params.month.index; 
			def strmonth = (monthindex > 9? monthindex: '0'+monthindex); 
			def dtstart = java.sql.Date.valueOf(''+ params.year +'-'+ strmonth +'-01'); 
			def dtend = dtSvc.getMonthEndDate( dtstart ); 
			def months = dtSvc.getMonths(); 
			params.startdate = dtstart;
			params.enddate = dtend;
			period.append( months[monthindex-1].caption +' '+ params.year ); 
		
		} else if ( params.period == 'asofmonth' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.month ) throw new Exception('month is required');

			def monthindex = params.month.index; 
			def strmonth = (monthindex > 9? monthindex: '0'+monthindex); 
			def dtstart = java.sql.Date.valueOf(''+ params.year +'-01-01'); 
			def dtend = java.sql.Date.valueOf(''+ params.year +'-'+ strmonth +'-01');
			dtend = dtSvc.getMonthEndDate( dtend ); 

			def months = dtSvc.getMonths(); 
			params.startdate = dtstart;
			params.enddate = dtend;
			if ( months[0].index != months[monthindex-1].index ) { 
				period.append( months[0].caption ).append(' - '); 
			} 
			period.append( months[monthindex-1].caption ).append(' '+ params.year); 
		
		} else {
			if ( !params.date ) throw new Exception('date is required');

			def syear = params.date.toString().split('-')[0]; 
			if ( params.period == 'asofday' ) {
				period.append("As of "); 	
				params.startdate = syear +'-01-01'; 
			} else {
				params.startdate = params.date;
			}

			params.enddate = params.date; 
			params.year = syear; 

			def formatter = new java.text.SimpleDateFormat('MMMMM dd, yyyy');
			if ( params.date instanceof java.util.Date ) {
				period.append(formatter.format( params.date ));
			} else {
				period.append(formatter.format( java.sql.Date.valueOf( params.date ) )); 
			} 
		}
		params.strperiod = period.toString(); 
		
	}


	def toInteger(paramvalue){
		if (paramvalue == null) 
			return 0

		try{
			return 
			new java.math.BigDecimal(paramvalue.toString()).intValue()
		}
		catch(e){
			return 0
		}
	}

	def toDecimal(paramvalue){
		if (paramvalue == null) 
			return 0.0

		try{
			return new java.math.BigDecimal(paramvalue.toString())
		}
		catch(e){
			return 0.0 
		}
	}


}
