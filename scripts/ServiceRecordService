import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;

public class ServiceRecordService extends ActiveCrudListService
{
	@ActiveDB(value='servicerecord', em='tagabukid_hrmis')
	def em;

	@ActiveDB(value='bukpayorder', em='plugtreasury')
	def emx;

	@Service('DateService')
	def dtSvc

	@Service('BUKPayOrderService')
	def poSvc 


	// @ProxyMethod
	// public def getGroupName( o ) {
	// 	//beforeUpdate(o)
	// 	//tp.updatestate(o);

	// 	//println o

	// 	o.searchtext+='%'

	// 	return em.getGroupName( o );

		
        	
	// }

	// @ProxyMethod
	// def initRenew(o){
		
	// 	def entity = [:];
	// 	entity = o
	// 	entity.objid = 'JO' + new java.rmi.server.UID() +"-"+ dtSvc.getServerYear()
	// 	entity.state = "DRAFT"
	// 	entity.status = "JO"
	// 	entity.effectivefrom = null
	// 	entity.effectiveuntil = null
	// 	entity.natureofappointment = null
	// 	entity.dateissued = null
	// 	entity.remarks = null
		
	// 	entity.appointmentMemberItems.each{
	// 		it.objid = 'JOI' + new java.rmi.server.UID() +"-"+ dtSvc.getServerYear()
	// 	}

	// 	//entity.recordlog = [:]
	// 	//entity.recordlog.datecreated = dtSvc.serverDate
 //        //entity.recordlog.createdbyuserid = env.USERID
 //        //entity.recordlog.createdbyuser = env.FULLNAME
 //        //entity.recordlog.dateupdated =  dtSvc.serverDate
 //        //entity.recordlog.lastupdatedbyuserid = env.USERID
 //        //entity.recordlog.lastupdatedbyuser = env.FULLNAME
        
 //        return entity;

	// }

	@ProxyMethod
    public def getDailyWageByTranch(o,x) {
    	return em.findDailyWageByTranch([trancheid:o.objid,paygradestepincrementid:x.objid]);
    }

    @ProxyMethod
    public def paymentorderSupport(o){
    	//println '+++++++++++++++++++'
    	//println o

		o.objid = 'PO' + new java.rmi.server.UID()
		//o.office = "HR"
		def paymentorders = []
		
		def payorder = createPaymentOrder(o)

		poSvc.save(payorder)

		//println	payorder	

		return payorder	
    }



    def createPaymentOrder(o){
		def paymentorderitems = []
		
		def paymentorderitem = [
			objid: 'PI' + new java.rmi.server.UID(),
			payorderid : o.objid,
			item_objid : 'IA3f500166:132a973ff20:-7f10',
			item_title : 'SERVICE RECORD',
			item_code : '188',
			type : 'REVENUE',
			valuetype : 'ANY',
			defaultvalue : '100.00',
			item_fund_objid : 'GENERAL',
			item_fund_title : 'GENERAL',
			item_fund_code : '01',
			amount : '100',
			remarks: null,
			sgquantity : null,
			couponno : null,
		]
		paymentorderitems.push(paymentorderitem)

		//println paymentorderitems
		def paymentorder = [
			objid : o.objid,
			ordernum : null,
			permobjid : o.permobjid	,
			paidby : o.name,
			paidbyaddress : o.address,
			amountdue : paymentorderitems.amount.sum(),
			items : paymentorderitems,
			office: 'HR',
			state : 'DRAFT',
			ordertype : 'MISC'

		]


		return paymentorder
	}


	@ProxyMethod
	def findReceiptData(params){

		println params.objid

		def d = dtSvc.getServerDate()
		def x = em.findServiceRecordReceiptData([objid:params.objid])
		//def diff = em.findDateDiff([currentdate:d, receiptdate:x.receiptdate])
		def diff = x ? em.findDateDiff([currentdate:d, receiptdate:x.receiptdate]) : em.findDateDiffBogus()

		return diff.difference
	}



}
