import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*;

class TagabukidHRMISAppointmentCasualReportService 
{
	@Service("PersistenceService")
    def persistenceSvc;

	@Service('DateService')
	def dtSvc 

	@ActiveDB(value='hrmis_appointmentcasual', em='tagabukid_hrmis')
	def em;

	@Service('TagabukidLookupService')
    def tgbkdSvc

	@Service('NumberService')
	def numSvc

	@Service('QueryService')
	def querySvc

	@Service('RPTUtil')
	def util

	@Env
	def env;
	@ProxyMethod
	public def getPages(params){
		def appointment = persistenceSvc.read(params)
		def pages       = appointment.appointmentitems.size()
		def pagelist    = []
		def pagecount   = 0
		for(def x=1;x<=pages;x++){
			
			if(x % 15 == 0){
				def y = [
					title: "Items " + (x - 14) + " to "  + x,
					start: (x - 14),
					end  : x,
					page : pagecount += 1
				]
				pagelist.add(y)
			}
		}
		if (pages % 15 != 0){
			def y = [
					title: "Items " + ((pages.intdiv(15) * 15) + 1) + " to "  + ((pages.intdiv(15) * 15) + pages % 15),
					start: ((pages.intdiv(15) * 15) + 1),
					end  : ((pages.intdiv(15) * 15) + pages % 15),
					page : pagecount += 1
				]
			pagelist.add(y)
		}
		return pagelist
	}

	@ProxyMethod
	public def getAppointmentCasualById(params,page,pagelist){
		def data = [:]
	    // println page
		def appointment = persistenceSvc.read(params)
		// def o           = [
		// 	parentid      : appointment.objid,
		// 	_start     : page.start,
		// 	_limit	   : page.end,
		// ]
		// println o
		// // appointment.appointmentitems = querySvc.getList(o)
		// appointment.appointmentitems = em.getCasualAppointmentItems(o)
		appointment.appointmentitems.each{
			it.personnel = tgbkdSvc.getEntityByObjid([entityid:it.personnel.objid]);
			it.plantilla = tgbkdSvc.findPlantillaById([plantillaid:it.plantilla.objid]);
			// it.plantilla.Id = it.plantilla.Id.toString()
		}.sort{it.personnel.lastname}
		def pagesize                     = appointment.appointmentitems.size()
		def list                         = appointment.appointmentitems[(page.start - 1)..(page.end - 1)]
		    appointment.appointmentitems = []
		list.each{
			appointment.appointmentitems.add(it)
		}
	
		appointment.signatorygroup = persistenceSvc.read( [_schemaname:'hrmis_appointment_signatorygrouping', objid:appointment.signatorygroup.objid] );
		// println appointment
	
		data.reportdata = appointment;
		data.parameters = [
			LGUNAME   : "PG-BUKIDNON, REGION 10",
			LGUADDRESS: "Provincial Capiptol, City of Malaybalay",
			TITLE     : "PLANTILLA OF CASUAL APPOINTMENTS",
			START     : page.start,
			LASTPAGE  : page.end == pagesize,
			PAGENUMBER: page.page - 1,
			PAGECOUNT : pagelist.size() + 1
		]
		return data
	}

	@ProxyMethod
	public def getAppointmentCasualRaiById(params){
		def data = [:]

		
	//    println params.signatorygroup
		def appointment = persistenceSvc.read(params)
		appointment.appointmentitems.each{
			it.personnel = tgbkdSvc.getEntityByObjid([entityid:it.personnel.objid]);
			it.plantilla = tgbkdSvc.findPlantillaById([plantillaid:it.plantilla.objid]);
			// it.plantilla.Id = it.plantilla.Id.toString()
		}.sort{it.personnel.lastname}
		appointment.signatorygroup = persistenceSvc.read( [_schemaname:'hrmis_appointment_signatorygrouping', objid:params.signatorygroup.objid] );
		// println appointment
		data.reportdata = appointment;
		data.parameters = [
			LGUNAME            : "PG-BUKIDNON, REGION 10",
			LGUADDRESS         : "Provincial Capiptol, City of Malaybalay",
			TITLE              : "REPORT ON APPOINTMENT ISSUED (RAI)",
			appointmentforms   : params.appointmentforms,
			casualappointment  : params.casualappointment,
			pds                : params.pds,
			eligibility        : params.eligibility,
			positiondescription: params.positiondescription,
			oathofoffice       : params.oathofoffice,
			assumptionofduty   : params.assumptionofduty,
		]
		return data


	}

	


	def buildTitle(params) {
		if (params.period == 'quarterly') return 'Quarterly'
        if (params.period == 'monthly') return 'Monthly'
        if (params.period == 'daily') return 'Daily'
        if (params.period == 'asofqtr') return 'Quarterly'
        if (params.period == 'asofmonth') return 'Monthly'
        if (params.period == 'asofday') return 'Daily'
	}

	@ProxyMethod
	public List getNumDays( year, month ) {
		if ( !month && month < 0 ) return []
		
		Calendar cal = Calendar.getInstance()
        cal.set( year, month, 1)
        int maxday  = cal.getActualMaximum(cal.DAY_OF_MONTH)
        def numdays = []
		1.upto( maxday ) { numdays.add( it ) }
		return numdays 
	}

	@ProxyMethod
	public List getDocumentStates() {
		return [
		[name:'idle', title:'IDLE'],
		[name:'enroute', title:'ENROUTE'],
		[name:'received', title:'RECEIVED'],
		[name:'processing', title:'PROCESSING'],
		[name:'sent', title:'SENT'],
		[name:'closed', title:'CLOSED'],
		[name:'archive', title:'ARCHIVE'],
		[name:'attached', title:'ATTACHED'],
		[name:'archived', title:'ARCHIVED'],
		[name:'offline', title:'OFFLINE'],
		[name:'outgoing', title:'OUTGOING'],
		[name:'redflag', title:'REDFLAG'],
		[name:'linked', title:'LINKED']
		];
	
	}

	@ProxyMethod
	public Boolean getReportPermission() {
		return userRoleSvc.getUsers( [domain:'SUBAY', roles:'MASTER'] ).collect {it.objid}.contains(env.USERID)
	
	}

	void buildParams( params ) {
		params.filter = '';
		params.period = '';
		if(!params.asof){
			if(!params.month ){
				params.period = 'quarterly'
			}else if(!params.day){
				params.period = 'monthly'
			}else{
				params.period = 'daily'
				params.date   = params.year +'-'+ params.month.index + '-' + params.day;
			}
		}else{
			if(!params.month ){
				params.period = 'asofqtr'
			}else if(!params.day){
				params.period = 'asofmonth'
			}else{
				params.period = 'asofday'
				params.date   = params.year +'-'+ params.month.index + '-' + params.day;
			}
		}

		def period  = new StringBuffer();
		def rundate = dtSvc.getServerDate();
		if ( params.period == 'quarterly' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.qtr ) throw new Exception('qtr is required');

			def months           = dtSvc.getMonthsByQtr( params.qtr );
			def monthindex       = months[0].index;
			def strmonth         = (monthindex > 9? monthindex: '0'+monthindex);
			    params.startdate = params.year +'-'+ strmonth +'-01';
			    params.enddate   = dtSvc.getQtrEndDate( params.qtr, params.year );
			period.append( months[0].caption +' - '+ months[-1].caption +' '+ params.year ); 

		} else if ( params.period == 'asofqtr' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.qtr ) throw new Exception('qtr is required');

			def months = dtSvc.getMonths();
			period.append( months[0].caption );
			params.startdate = params.year +'-01-01';
			params.enddate   = dtSvc.getQtrEndDate( params.qtr, params.year );

			months = dtSvc.getMonthsByQtr( params.qtr );
			period.append(' - '+ months[-1].caption +' '+ params.year ); 

		} else if ( params.period == 'monthly' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.month ) throw new Exception('month is required');

			def monthindex       = params.month.index;
			def strmonth         = (monthindex > 9? monthindex: '0'+monthindex);
			def dtstart          = java.sql.Date.valueOf(''+ params.year +'-'+ strmonth +'-01');
			def dtend            = dtSvc.getMonthEndDate( dtstart );
			def months           = dtSvc.getMonths();
			    params.startdate = dtstart;
			    params.enddate   = dtend;
			period.append( months[monthindex-1].caption +' '+ params.year ); 
		
		} else if ( params.period == 'asofmonth' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.month ) throw new Exception('month is required');

			def monthindex = params.month.index;
			def strmonth   = (monthindex > 9? monthindex: '0'+monthindex);
			def dtstart    = java.sql.Date.valueOf(''+ params.year +'-01-01');
			def dtend      = java.sql.Date.valueOf(''+ params.year +'-'+ strmonth +'-01');
			    dtend      = dtSvc.getMonthEndDate( dtend );

			def months           = dtSvc.getMonths();
			    params.startdate = dtstart;
			    params.enddate   = dtend;
			if ( months[0].index != months[monthindex-1].index ) { 
				period.append( months[0].caption ).append(' - '); 
			} 
			period.append( months[monthindex-1].caption ).append(' '+ params.year); 
		
		} else {
			if ( !params.date ) throw new Exception('date is required');

			def syear = params.date.toString().split('-')[0];
			if ( params.period == 'asofday' ) {
				period.append("As of "); 	
				params.startdate = syear +'-01-01';
			} else {
				params.startdate = params.date;
			}

			params.enddate = params.date;
			params.year    = syear;

			def formatter = new java.text.SimpleDateFormat('MMMMM dd, yyyy');
			if ( params.date instanceof java.util.Date ) {
				period.append(formatter.format( params.date ));
			} else {
				period.append(formatter.format( java.sql.Date.valueOf( params.date ) )); 
			} 
		}
		params.strperiod = period.toString();
		
	}


	def toInteger(paramvalue){
		if (paramvalue == null) 
			return 0

		try{
			return 
			new java.math.BigDecimal(paramvalue.toString()).intValue()
		}
		catch(e){
			return 0
		}
	}

	def toDecimal(paramvalue){
		if (paramvalue == null) 
			return 0.0

		try{
			return new java.math.BigDecimal(paramvalue.toString())
		}
		catch(e){
			return 0.0 
		}
	}


}
