import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

/* 
	This interceptor posts to the service records after post. 
*/
class ServiceRecordInterceptor { 

@ActiveDB(value='servicerecord', em='tagabukid_hrmis')
def em;

@ActiveDB(value='hrmis_servicerecords', em='tagabukid_hrmis')
def ems;

// @Service("ServiceRecordPostService")
// def SrpSvc;

@Service("DateService")
def dateSvc;

@Env
def env;


@After(pattern="PersistenceService.(update)", eval="#{args[0]._schemaname == 'hrmis_appointmentjoborder' }" ) 
	public void postJobOrdertoServicerecord( def evt ) {
		def r = evt.result;

		// println r 
		// println "+++++++++++++++++++++++++++"

		def churvs = em.getResultFromJobOrderAppointment([objid: r.objid])
		/*println churvs
		println "======================================="*/

		//def entry = []

		churvs.each{it ->
			def individual = [

			objid : 'SR-JOI' + new java.rmi.server.UID(),
			pdsid : it.pdsid,
			personnelaction : [
							    objid : it.natureofappointment.objid,
								name  : em.findNatureofAppointmentName([objid: it.natureofappointment.objid]).name,
								code  : em.findNatureofAppointmentCode([objid: it.natureofappointment.objid]).code,
							  ],
			datefrom : it.effectivefrom,
			dateto : it.effectiveuntil,
			jobposition : [objid : it.positionid],
			otherjobposition : null,
			tranche : [objid : it.currentsalarystep.objid],
			paygradestepincrement : [objid : em.findPayGradeId([objid: it.positionid]).paygradeid],
			employmentstatus : [objid : 'b51adf40-7dcc-426a-adac-941657b7f9f9'],
			wage : it.dailysalary,
			compensationtype : [objid :'bb75ac3e-993f-11e8-ae92-8cec4b1ea771'],
			monthlysalary : it.dailysalary * 22,
			reportdisplay : 'DAILY',
			org : [orgunitid : it.org.orgunitid],
			branch : [objid :'TEB0003'],
			lawop : 0.0000,
			separationtype : [objid : null],
			separationdate : null,
			isgovservice : 0,
			recordlog : [
							datecreated : dateSvc.getServerDate(),
							createdbyuserid : env.USERID,
							createdbyuser : env.FULLNAME,
							dateoflastupdate : dateSvc.getServerDate(),
							lastupdatedbyuserid : env.USERID,
							lastupdatedbyuser : env.FULLNAME, 
						],
			old : null,

			]
			//entry.add(individual)
			ems.create(individual)
		}
		
			
		//println entry
		//SrpSvc.postJOServiceRecord( entry );

		 

	}

@After(pattern="PersistenceService.(update)", eval="#{args[0]._schemaname == 'hrmis_appointmentcasual' }" ) 
public void postCasualtoServicerecord( def evt ) {
	def r = evt.result;

	//println r 
	// println "+++++++++++++++++++++++++++"

 	def casualchurvs = em.getResultFromCasualAppointment([objid: r.objid])
	//println casualchurvs
	// 	println "======================================="

	//def entry = []

	casualchurvs.each{it ->
	 	def individual = [

	 	objid : 'SR-CAI' + new java.rmi.server.UID(),
	 	pdsid : it.pds.objid,
	 	personnelaction : [
	 					    objid : it.natureofappointment.objid,
	 						name  : em.findNatureofAppointmentName([objid: it.natureofappointment.objid]).name,
	 						code  : em.findNatureofAppointmentCode([objid: it.natureofappointment.objid]).code,
	 					  ],
	 	datefrom : it.effectivefrom,
	 	dateto : it.effectiveuntil,
	 	jobposition : [objid : em.findJobPositionId([objid: it.plantilla.objid]).jobid],
	 	otherjobposition : null,
	 	tranche : [objid : it.currentsalarystep.objid],
	 	paygradestepincrement : [objid : em.findPayGradeId([objid: em.findJobPositionId([objid: it.plantilla.objid]).jobid]).paygradeid],
	 	employmentstatus : [objid : 'e1a17cb8-6595-440c-b90d-0f13137a86c6'],
	 	wage : it.dailywage,
	 	compensationtype : [objid :'c965ba41-993f-11e8-ae92-8cec4b1ea771'],
	 	monthlysalary : it.monthlywage,
	 	reportdisplay : 'MONTHLY',
	 	org : [orgunitid : it.org.orgunitid],
	 	branch : [objid :'TEB0003'],
	 	lawop : 0.0000,
	 	separationtype : [objid : null],
	 	separationdate : null,
	 	isgovservice : 1,
	 	recordlog : [
	 					datecreated : dateSvc.getServerDate(),
	 					createdbyuserid : env.USERID,
	 					createdbyuser : env.FULLNAME,
	 					dateoflastupdate : dateSvc.getServerDate(),
	 					lastupdatedbyuserid : env.USERID,
	 					lastupdatedbyuser : env.FULLNAME, 
	 				],
	 	old : null,

	 	]
	 		//entry.add(individual)
	 		ems.create(individual)
	 	}
		
			
		//println entry
		

		 

	}

}