import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

/* 
	This interceptor posts to the service records after post. 
*/
class HRMISLeaveInterceptor { 

	@ActiveDB(value='hrmis_leave', em='tagabukid_hrmis')
	def em;

	@Service("DateService")
	def dateSvc;

	@Env
	def env;

	@Service("PersistenceService")
	def persistenceSvc;

	@Service('QueryService')
	def querySvc

	@Service('TagabukidHRMISLeaveCardPostService')
	def leavecardentry

	@Before(pattern="PersistenceService.(create)", eval="#{args[0]._schemaname == 'hrmis_leave'}" ) 
	public void verifyLeaveBalance( def evt ) {
		def r = evt.args[0];

		//validate leave balance
		r.leavedetails.each{
			if (it.ispaid){
				def p = [_schemaname: 'hrmis_leavecard'];
				p.findBy = [ 'leavetype_objid':it.leavetype.objid,'pds_objid':r.pds.objid];
				def leavecard =  querySvc.findFirst( p );
				if(!leavecard){
					throw new Exception("This appointment has no leave card for leave type:" + it.leavetype.name );
				}

				def leavebalance = leavecard.endbalance - (it.leaveduration == "FULL"? 1 : 0.5)
			
				if(leavebalance < 0){
					throw new Exception("Insufficient leave balance for leave type :" + it.leavetype.name );
				}
			}
			
		}
	}

	@Before(pattern="PersistenceService.(update)", eval="#{args[0]._schemaname == 'hrmis_leavedetails' && args[0].status == 'APPROVED'}" ) 
	public void verifyLeaveBalanceOnApprove( def evt ) {
		def r = evt.args[0];

			def leavedetail = persistenceSvc.read([_schemaname : 'hrmis_leavedetails',objid: r.objid])
			if(leavedetail){
				if (leavedetail.ispaid){
					def p = [_schemaname: 'hrmis_leavecard'];
					p.findBy = [ 'leavetype_objid':leavedetail.leavetype.objid,'pds_objid':leavedetail.parent.pds.objid];
					def leavecard =  querySvc.findFirst( p );
					if(!leavecard){
						throw new Exception("This appointment has no leave card for leave type:" + leavedetail.leavetype.name );
					}

					def leavebalance = leavecard.endbalance - (leavedetail.leaveduration == "FULL"? 1 : 0.5)
		
					if(leavebalance < 0){
						throw new Exception("Insufficient leave balance for leave type :" + leavedetail.leavetype.name );
					}
				}
			}
		
	}

	@Before(pattern="PersistenceService.(update)", eval="#{args[0]._schemaname == 'hrmis_leavedetails' && args[0].status == 'APPROVED'}" ) 
	public void postDRonapprove( def evt ) {
		def r = evt.args[0];

			def leavedetail = persistenceSvc.read([_schemaname : 'hrmis_leavedetails',objid: r.objid])
			if(leavedetail){
				if (leavedetail.ispaid){
					def p = [_schemaname: 'hrmis_leavecard'];
					p.findBy = [ 'leavetype_objid':leavedetail.leavetype.objid,'pds_objid':leavedetail.parent.pds.objid];
					def leavecard =  querySvc.findFirst( p );

					leavecard.dr = (leavedetail.leaveduration == "FULL"? 1 : 0.5)
					leavecard.cr = 0
					leavecard.refid = leavedetail.objid
					leavecard.reftype = "LEAVE"
					leavecard.refno = leavedetail.parent.objid
					leavecard.refdate = leavedetail.leavedate
					leavecard.particulars = (!leavedetail.comments ? "SYSTEM GENERATED": leavedetail.comments)
					leavecardentry.postDR(leavecard)
				}
			}
		
	}

	@Before(pattern="PersistenceService.(update)", eval="#{args[0]._schemaname == 'hrmis_leavedetails' && args[0].status == 'CANCELLED'}" ) 
	public void postCRoncancel( def evt ) {
		def r = evt.args[0];

			def leavedetail = persistenceSvc.read([_schemaname : 'hrmis_leavedetails',objid: r.objid])
			if(leavedetail){
				if (leavedetail.ispaid){
					def p = [_schemaname: 'hrmis_leavecard'];
					p.findBy = [ 'leavetype_objid':leavedetail.leavetype.objid,'pds_objid':leavedetail.parent.pds.objid];
					def leavecard =  querySvc.findFirst( p );

					leavecard.dr = 0
					leavecard.cr = (leavedetail.leaveduration == "FULL"? 1 : 0.5)
					leavecard.refid = leavedetail.objid
					leavecard.reftype = "CANCEL LEAVE"
					leavecard.refno = leavedetail.parent.objid
					leavecard.refdate = leavedetail.leavedate
					leavecard.particulars = (!leavedetail.comments ? "SYSTEM GENERATED": leavedetail.comments)
					leavecardentry.postCR(leavecard)
				}
			}
		
	}

}